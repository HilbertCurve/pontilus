An OpenGL program has shaders, vertex buffers, a window, a camera, mouse/keyboard callbacks, 
and the rest of the program logic. 
Windows is hard.

OpenGL:
 | DONE ;; Application.cpp - inits everything / sets up a window / sets up callbacks
 | DONE ;; Camera.cpp - camera
 | DONE ;; Renderer.cpp - renders stuff
 | DONE ;; Shader.cpp - handles getting shader data
 | DONE ;; Texture.cpp - textures, when that becomes necessary
 | DONE ;; InputListener.cpp - mouse and keyboard callbacks/data
 | TODO -- RenderBatch.cpp - a way to contain a lot of a single primitive type
 /

Rend (Renderable Element-based Nugget of Data):
    Here are some questions I'd like to answer about 
    Rends, like how to use them or how/why I chose
    to implement them. 
 | What is a Rend?
 | Why separate RenderBatch from Rend?
 | Why Nugget? 
 | | Phonaesthetics: https://en.wikipedia.org/wiki/Phonaesthetics
 | | Also because I was hungry at the time.
 /

Misc:
 | DEPR // Math.cpp - not needed, replaced with glm
 | DEPR // JSON.cpp - for glTF files, replaced with rapidjson
 | TODO -- Box.cpp - a unit test encapsulating the idea of a box; can be rendered and stuff
 | DONE ;; Primitive.h - basic renderable primitives
 / 

Main Checklist:
 | DONE ;; Get renderer chugging out things
 | DONE ;; Do github stuffs
 | LIST [] IO stuff
 | | DONE ;; Keyboard
 | | DONE ;; Mouse
 |
 | DONE ;; Refactoring
 | DONE ;; Textures and images
 | 
 | TODO -- Render batches
 | 
 | LIST [] Engine
 | | TODO -- Plan out the Engine
 | | TODO -- ? I need to plan the engine before I make a checklist.
 |
 | TODO -- Debug Camera.cpp
 | TODO -- Documentation
 / 

Issues:
 | Shader.cpp takes too long to compile; I think it has to do with <ifstream> stuff.
 | Camera.cpp has wierd visual bugs involving an object rotating out of frame.
 / 

Backburner:
 | BURN ~~ Windows build
 / 

Future Plans:
 | BURN ~~ Physics
 | BURN ~~ GUI
 /

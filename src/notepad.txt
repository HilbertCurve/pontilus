An OpenGL program has shaders, vertex buffers, a window, a camera, mouse/keyboard callbacks, 
and the rest of the program logic. 
Windows is hard.

OpenGL:
 | DONE ;; Application.cpp - inits everything / sets up a window / sets up callbacks
 | DONE ;; Camera.cpp - camera
 | DONE ;; Renderer.cpp - renders stuff
 | DONE ;; Shader.cpp - handles getting shader data
 | TODO -- Texture.cpp - textures, when that becomes necessary
 | DONE ;; InputListener.cpp - mouse and keyboard callbacks/data

Misc:
 | DEPR == Math.cpp - not needed, replaced with glm
 | TODO -- Box.cpp - a struct encapsulating the idea of a box; can be rendered and stuff
 | 

Main Checklist:
 | DONE ;; Get renderer chugging out things
 | DONE ;; Do github stuffs
 | LIST [] IO stuff
 | | DONE ;; Keyboard
 | | DONE ;; Mouse
 |
 | DONE ;; Refactoring
 |
 | TODO -- Debug Camera.cpp
 | TODO -- Documentation
 | TODO -- Textures
 | 

Issues:
 | Shader.cpp takes too long to compile; I think it has to do with <ifstream> stuff.
 | Camera.cpp has wierd visual bugs involving an object rotating out of frame.
 | 

Backburner:
 | BURN ~~ Windows build
 | 

Future Plans:
 | BURN ~~ ECS
 | BURN ~~ Physics
 | 